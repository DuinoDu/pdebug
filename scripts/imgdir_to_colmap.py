#!/usr/bin/env python3
import json
import os
import shutil
import sys
from typing import Optional

import cv2
import numpy as np
import typer


def do_system(arg):
    print(f"==== running: {arg}")
    err = os.system(arg)
    if err:
        print("FATAL: command failed")
        sys.exit(err)


# @task(name="my-tool")
def main(
    imgdir: str,
    # choices=["exhaustive","sequential","spatial","transitive","vocab_tree"]
    matcher: Optional[str] = typer.Option(
        "sequential",
        help="select which matcher colmap should use. sequential for videos, exhaustive for adhoc images",
    ),
    # choices=["SIMPLE_PINHOLE", "PINHOLE", "SIMPLE_RADIAL", "RADIAL","OPENCV"]
    camera_model: Optional[str] = typer.Option("OPENCV", help="camera model"),
    camera_params: Optional[str] = typer.Option(
        "",
        help="intrinsic parameters, depending on the chosen model.  Format: fx,fy,cx,cy,dist",
    ),
    output: Optional[str] = typer.Option(None, help="output name"),
):
    """Imgdir to pose and sparse pcd, using colmap."""
    # typer.echo(typer.style(f"hello, tool", fg=typer.colors.GREEN))
    if not output:
        output = os.path.abspath(imgdir) + "_colmap"
    if os.path.exists(output):
        shutil.rmtree(output)
    os.makedirs(output, exist_ok=True)

    db = os.path.join(output, "colmap.db")
    do_system(
        f'colmap feature_extractor --ImageReader.camera_model {camera_model} --ImageReader.camera_params "{camera_params}" '
        f"--SiftExtraction.estimate_affine_shape=true --SiftExtraction.domain_size_pooling=true --SiftExtraction.gpu_index 0 "
        "--ImageReader.single_camera 1 "
        f"--database_path {db} --image_path {imgdir}"
    )
    do_system(
        f"colmap {matcher}_matcher --SiftMatching.guided_matching=true --database_path {db} --SiftMatching.gpu_index 0 "
    )

    sparse = os.path.join(output, "sparse")
    os.makedirs(sparse, exist_ok=True)
    do_system(
        f"colmap mapper --database_path {db} --image_path {imgdir} --output_path {sparse}"
    )

    # {sparse}/0 is auto-generated by colmap.
    do_system(
        f"colmap bundle_adjuster --input_path {sparse}/0 --output_path {sparse}/0 --BundleAdjustment.refine_principal_point 1"
    )
    do_system(
        f"colmap model_converter --input_path {sparse}/0 --output_path {sparse}/0 --output_type TXT"
    )


if __name__ == "__main__":
    typer.run(main)
